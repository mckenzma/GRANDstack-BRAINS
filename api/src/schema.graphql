type State {
  id: ID!
  code: String
  name: String
  abbreviation: String
  # latitude_decimal: Float
  # longitude_decimal: Float
  location: Point

  bridges: [Bridge] @cypher(statement: "MATCH (this)-[:HAS_COUNTY]->(:County)-[:HAS_PLACE]->(:Place)-[:HAS_BRIDGE]->(bridge:Bridge) RETURN bridge")

  numCounties: Int @cypher(statement: "MATCH (this)-[:HAS_COUNTY]->(c:County) RETURN count(DISTINCT c)")
  numPlaces: Int @cypher(statement: "MATCH (this)-[:HAS_COUNTY]->(:County)-[:HAS_PLACE]->(p:Place) RETURN count(DISTINCT p)")
  numBridges: Int @cypher(statement: "MATCH (this)-[:HAS_COUNTY]->(:County)-[:HAS_PLACE]->(:Place)-[:HAS_BRIDGE]->(b:Bridge) RETURN count(DISTINCT b)")

  chartBarBridgeByBuildYear: [BarChartPairs] @cypher(statement: """
    MATCH (this)-[:HAS_COUNTY]->(:County)-[:HAS_PLACE]->(:Place)-[:HAS_BRIDGE]->(bridge:Bridge) 
    WITH bridge.yearbuilt AS year, count(bridge) AS count
    RETURN {year: year, count: count} AS datapoint
    ORDER BY year ASC
    """
  )

  # chartHeatMapStateOwnerCount(owners: [String]): Int @cypher(statement: """
  #   MATCH (this)<-[*]-(bridge:Bridge)-[:OWNED_BY]->(owner:Owner)
  #   WHERE owner.description in $owners
  #   RETURN count(bridge)
  #   """
  # )

  # chartHeatMapStateOwnerCount(owner: String): Int @cypher(statement: """
  # chartHeatMapStateOwnerCount: Int @cypher(statement: """
  #   MATCH (this)<-[*]-(bridge:Bridge)-[:OWNED_BY]->(owner:Owner)
  #   RETURN count(bridge)
  #   """
  # )

  # chartHeatMapStateOwnerCount(owners: [String]): [String], [Int] @cypher(statement: """
  #   MATCH (this)<-[*]-(bridge:Bridge)-[:OWNED_BY]->(owner:Owner)
  #   WHERE owner.description in $owners
  #   RETURN owner.description, count(bridge)
  #   """
  # )

  # chartHeatMapStateOwners(owners: [String]): String @cypher(statement: """
  #   MATCH (this)<-[*]-(:Bridge)-[OWNED_BY]->(owner:Owner)
  #   WHERE owner.description in $owners
  #   RETURN owner.description
  #   """
  # )

  chartHeatMapStateOwners(owners: [String]): [Pairs] @cypher(statement: """
    MATCH (this)
    UNWIND $owners AS owner
    WITH [ (this)<-[*]-(b:Bridge)-[:OWNED_BY]->(o:Owner) WHERE o.description = owner | b ] AS bridges, owner
    WITH owner AS ownerDescription, size(bridges) AS bridgeCount
    RETURN {ownerDescription: ownerDescription, bridgeCount: bridgeCount} AS datapoint
    """
  )

  # stackedBarChart_Rows_Per_State_Per_Year: [RowCountByYear] @cypher(statement: """
  #     // MATCH (s:State)
  #     MATCH (this)
  #     // WITH s ORDER BY s.abbreviation ASC
  #     WITH this ORDER BY this.abbreviation ASC
  #     // MATCH (s)<-[:FILE_FOR]-(f:File:NoDelimiterFile)
  #     MATCH (this)<-[:FILE_FOR]-(f:File:NoDelimiterFile)
  #     // WITH this, f ORDER BY f.year
  #     WITH f ORDER BY f.year
  #     MATCH (f)-[r:CONTAINS]->()
  #     WITH f.year AS year, count(r) as count
  #     // WITH this, [f.year,count(r)] AS pairs
  #     //WITH [f.year,count(r)] AS pairs
  #     // RETURN this.abbreviation, collect(pairs), size(collect(pairs))
  #     //RETURN collect(pairs)
  #     RETURN {year: year, count: count} AS datapoint
  #   """
  # )

  county: [County] @relation(name: "HAS_COUNTY", direction: "OUT")

  files: [File] @relation(name: "FILE_FOR", direction: "IN")
}

type County {
  id: ID!
  code: String
  name: String
  location: Point

  state: State @relation(name: "HAS_COUNTY", direction: "IN")
  place: [Place] @relation(name: "HAS_PLACE", direction: "OUT")
}

type Place {
  id: ID!
  code: String
  name: String
  location: Point

  county: County @relation(name: "HAS_PLACE", direction: "IN")
  bridge: [Bridge] @relation(name: "HAS_BRIDGE", direction: "OUT")
}

type Bridge {
  id: ID!
  # name: String
  # state_code: String
  stateCode: String
  # county_code: String
  countyCode: String
  #place_code: String
  placeCode: String
  code: String
  latitude_decimal: Float
  longitude_decimal: Float
  # yearbuilt: Int
  buildYear: Int
  location: Point

  place: Place @relation(name: "HAS_BRIDGE", direction: "IN")
  # buildYear: BuildYear @relation(name: "BUILT_IN", direction: "OUT")
  maintenanceResp: MaintenanceResp @relation(name: "MAINTAINED_BY", direction: "OUT")
  owner: Owner @relation(name: "OWNED_BY", direction: "OUT")

  rows: [Row] @relation(name: "DATA_FOR", direction: "IN")
  numRows: Int @cypher(statement: "MATCH (this)<-[:DATA_FOR]-(r:Row) RETURN count(r)")

  latestInspectionLog: InspectionLog @relation(name: "LATEST_INSPECTION_LOG", direction: "OUT")

  inspectionLogs: [InspectionLog] @cypher(statement: """
    MATCH (this)-[:LATEST_INSPECTION_LOG]->(latestLog)
    MATCH path = (latestLog)-[:PREV_INSPECTION_LOG*]->(log)
    WITH nodes(path) AS logs
    UNWIND logs AS log
    RETURN log
    """
  )
}

type InspectionLog {
  id: ID!
  year: Int
  STRUCTURAL_EVAL_067: String
  DECK_GEOMETRY_EVAL_068: String
  UNDCLRENCE_EVAL_069: String
  POSTING_EVAL_070: String
  WATERWAY_EVAL_071: String
  APPR_ROAD_EVAL_072: String

  bridge: Bridge @relation(name: "LATEST_INSPECTION_LOG", direction: "IN")
  prevInspectionLogIn: InspectionLog @relation(name: "PREV_INSPECTION_LOG", direction: "BOTH")
  # prevInspectionLogIn: InspectionLog @relation(name: "PREV_INSPECTION_LOG", direction: "IN")
  # prevInspectionLogOut: InspectionLog @relation(name: "PREV_INSPECTION_LOG", direction: "OUT")
}

type BuildYear {
  # id: ID!
  year: Int

  # bridge: [Bridge] @relation(name: "BUILT_IN", direction: "IN")
}


type MaintenanceResp {
  id: ID!
  description: String

  bridge: [Bridge] @relation(name: "MAINTAINED_BY", direction: "IN")
}

type Owner {
  id: ID!
  description: String

  bridge: [Bridge] @relation(name: "OWNED_BY", direction: "IN")
}

# type Entity {
#   id: ID!
#   code: String
#   description: String
  
#   ownedBridges: [Bridge] @relation(name: "OWNS", direction: "OUT")
#   maintainedBridges: [Bridge] @relation(name: "MAINTAINS", direction: "OUT")
# }

type HeatMapDataPoint {
  stateName: String
  ownerDescription: String
  bridgeCount: Int
}

type HeatMapDataPoint_1 {
  stateName: String
  pairs: [Pairs]
}

type Pairs {
  ownerDescription: String
  bridgeCount: Int
}

type BarChartPairs 
{
  year: Int
  count: Int
}

type NodeCount {
  label: String
  count: Int
}

type RelationshipCount {
  type: String
  count: Int
}

type File {
  name: String
  year: String

  rows: [Row] @relation(name: "CONTAINS", direction: "OUT")
  state: State @relation(name: "FILE_FOR", direction: "OUT")

  numRows: Int @cypher(statement: "MATCH (this)-[:CONTAINS]->(r:Row) RETURN count(DISTINCT r)")
}

type Row {
  # data: String

  # order by number or alpha?
  # prob order by number to match document
  ADT_029: String
  APPR_KIND_044A:String
  APPR_RAIL_036C:String
  APPR_RAIL_END_036D:String
  APPR_ROAD_EVAL_072:String
  APPR_SPANS_046:String
  APPR_TYPE_044B:String
  APPR_WIDTH_MT_032:String
  BASE_HWY_NETWORK_012:String
  BRIDGE_IMP_COST_094:String
  BRIDGE_LEN_IND_112:String
  CHANNEL_COND_061:String
  COUNTY_CODE_003:String
  CRITICAL_FACILITY_006B:String
  CULVERT_COND_062:String
  DATE_LAST_UPDATE:String
  DATE_OF_INSPECT_090:String
  DECK_COND_058:String
  DECK_GEOMETRY_EVAL_068:String
  DECK_PROTECTION_108C:String
  DECK_STRUCTURE_TYPE_107:String
  DECK_WIDTH_MT_052:String
  DEDUCT_CODE:String
  DEGREES_SKEW_034:String
  DESIGN_LOAD_031:String
  DETOUR_KILOS_019:String
  DIRECTION_005E:String
  DTL_TYPE_OF_IMP:String
  FACILITY_CARRIED_007:String
  FEATURES_DESC_006A:String
  FEDERAL_LANDS_105:String
  FED_AGENCY:String
  FRACTURE_092A:String
  FRACTURE_LAST_DATE_093A:String
  FUNCTIONAL_CLASS_026:String
  FUTURE_ADT_114:String
  HIGHWAY_DISTRICT_002:String
  HIGHWAY_SYSTEM_104:String
  HISTORY_037:String
  HORR_CLR_MT_047:String
  IMP_LEN_MT_076:String
  INSPECT_FREQ_MONTHS_091:String
  INVENTORY_RATING_066:String
  INV_RATING_METH_065:String
  KILOPOINT_011:String
  LAT_016:String
  LAT_UND_MT_055B:String
  LAT_UND_REF_055A:String
  LEFT_CURB_MT_050A:String
  LEFT_LAT_UND_MT_056:String
  LOCATION_009:String
  LONG_017:String
  LRS_INV_ROUTE_013A:String
  MAINTENANCE_021:String
  MAIN_UNIT_SPANS_045:String
  MAX_SPAN_LEN_MT_048:String
  MEDIAN_CODE_033:String
  MEMBRANE_TYPE_108B:String
  MIN_NAV_CLR_MT_116:String
  MIN_VERT_CLR_010:String
  NATIONAL_NETWORK_110:String
  NAVIGATION_038:String
  NAV_HORR_CLR_MT_040:String
  NAV_VERT_CLR_MT_039:String
  NBI_TYPE_OF_IMP:String
  OPEN_CLOSED_POSTED_041:String
  OPERATING_RATING_064:String
  OPR_RATING_METH_063:String
  OTHER_STATE_CODE_098A:String
  OTHER_STATE_PCNT_098B:String
  OTHR_STATE_STRUC_NO_099:String
  OWNER_022:String
  PARALLEL_STRUCTURE_101:String
  PERCENT_ADT_TRUCK_109:String
  PIER_PROTECTION_111:String
  PLACE_CODE_004:String
  POSTING_EVAL_070:String
  PROGRAM_CODE:String
  PROJ_NO:String
  PROJ_SUFFIX:String
  RAILINGS_036A:String
  RECORD_TYPE_005A:String
  REMARKS:String
  RIGHT_CURB_MT_050B:String
  ROADWAY_IMP_COST_095:String
  ROADWAY_WIDTH_MT_051:String
  ROUTE_NUMBER_005D:String
  ROUTE_PREFIX_005B:String
  SCOUR_CRITICAL_113:String
  SERVICE_LEVEL_005C:String
  SERVICE_ON_042A:String
  SERVICE_UND_042B:String
  SPECIAL_CODE:String
  SPEC_INSPECT_092C:String
  SPEC_LAST_DATE_093C:String
  STATE_CODE_001:String
  STATUS_NO_10YR_RULE:String
  STATUS_WITH_10YR_RULE:String
  STEP_CODE:String
  STRAHNET_HIGHWAY_100:String
  STRUCTURAL_EVAL_067:String
  STRUCTURE_FLARED_035:String
  STRUCTURE_KIND_043A:String
  STRUCTURE_LEN_MT_049:String
  STRUCTURE_NUMBER_008:String
  STRUCTURE_TYPE_043B:String
  SUBROUTE_NO_013B:String
  SUBSTRUCTURE_COND_060:String
  SUFFICIENCY_ASTERC:String
  SUFFICIENCY_RATING:String
  SUPERSTRUCTURE_COND_059:String
  SURFACE_TYPE_108A:String
  TEMP_STRUCTURE_103:String
  TOLL_020:String
  TOTAL_IMP_COST_096:String
  TRAFFIC_DIRECTION_102:String
  TRAFFIC_LANES_ON_028A:String
  TRAFFIC_LANES_UND_028B:String
  TRANSITIONS_036B:String
  TYPE_LAST_UPDATE:String
  UNDCLRENCE_EVAL_069:String
  UNDWATER_LAST_DATE_093B:String
  UNDWATER_LOOK_SEE_092B:String
  VERT_CLR_OVER_MT_053:String
  VERT_CLR_UND_054B:String
  VERT_CLR_UND_REF_054A:String
  WATERWAY_EVAL_071:String
  WORK_DONE_BY_075B:String
  WORK_PROPOSED_075A:String
  YEAR_ADT_030:String
  YEAR_BUILT_027:String
  YEAR_OF_FUTURE_ADT_115:String
  YEAR_OF_IMP_097:String
  YEAR_RECONSTRUCTED_106:String
  # createdOn:
  # file:String



  file: File @relation(name: "CONTAINS", direction: "IN")
  bridge: Bridge @relation(name: "DATA_FOR", direction: "OUT")
}

type stackedBarChart_Rows_Per_State_Per_Year_Data_Point {
  year: String
  # data: [RowCountByState]
  data: [RowCountByState] @cypher(statement: """
    MATCH (ndf:NoDelimiterFile {year: this.year})-[:FILE_FOR]->(s:State)
    WITH ndf, s 
    ORDER BY s.abbreviation ASC
    MATCH (ndf)-[r:CONTAINS]->()
    WITH s.abbreviation AS state, count(r) AS count
    RETURN {state: state, count: count}
  """)
}

type RowCountByState {
  state: String
  count: Int
}

type stackedBarChart_Rows_Per_Year_Per_State_Data_Point {
  state: String
  data: [RowCountByYear] @cypher(statement: """
    MATCH (s:State {abbreviation: this.state})<-[:FILE_FOR]-(ndf:NoDelimiterFile)
    WITH s, ndf
    ORDER BY ndf.year DESC
    MATCH (ndf)-[r:CONTAINS]->()
    WITH ndf.year AS year, count(r) AS count
    RETURN {year: year, count: count}

  """)
}

type RowCountByYear {
  year: String
  count: Int
}

type Query {
    
  bridge(state: String, owner: String): [Bridge] @cypher(statement: """
    MATCH (b:Bridge)-[*]->(state:State)
    MATCH (b)-->(o:Owner)
    WHERE state.name = $state
    AND by.year = $year
    RETURN b
    """
    )

  nodeSummaryCount: [NodeCount] @cypher(statement: """
    CALL db.labels() YIELD label
    CALL apoc.cypher.run('MATCH (:`'+label+'`) RETURN count(*) as count',{}) YIELD value
    RETURN { label: label, count: value.count } AS nodeCount
    ORDER BY nodeCount.count DESC, nodeCount.label ASC
    """
  )

  NodeCount(label: String, count: Int): [NodeCount]

  relationshipSummaryCount: [RelationshipCount] @cypher(statement: """
    CALL db.relationshipTypes() YIELD relationshipType as type
    CALL apoc.cypher.run('MATCH ()-[:`'+type+'`]->() RETURN count(*) as count',{}) YIELD value
    RETURN {type: type, count: value.count } AS relationshipCount
    ORDER BY relationshipCount.count DESC, relationshipCount.type ASC
    """
  )

  RelationshipCount(type: String, count: Int): [RelationshipCount]

  queryBuildYear: [BuildYear] @cypher(statement: """
    MATCH (b:Bridge) 
    WHERE NOT b.buildYear IS NULL
    WITH DISTINCT b.buildYear AS year
    RETURN { year: year } AS buildYear
    ORDER BY buildYear.year DESC
    """
  )

  BuildYear(year: Int): [BuildYear]

  heatmapData(states: [String], owners: [String]): [HeatMapDataPoint] @cypher(statement: """
    MATCH (s:State)<-[*]-(b:Bridge)-[:OWNED_BY]->(o:Owner)
    WHERE s.name IN $states
    AND o.description IN $owners
    WITH s.name AS stateName, o.description AS ownerDescription, count(b) AS bridgeCount
    RETURN {stateName: stateName, ownerDescription: ownerDescription, bridgeCount: bridgeCount} AS datapoint
    """
  )

  heatmapData_1(states: [String], owners: [String]): [HeatMapDataPoint_1] @cypher(statement: """
    MATCH (s:State)<-[*]-(b:Bridge)-[:OWNED_BY]->(o:Owner)
    WHERE s.name IN $states
    AND o.description IN $owners
    WITH s.name AS stateName, o.description AS ownerDescription, count(b) AS bridgeCount
    RETURN {stateName: stateName, pairs: collect({ownerDescription: ownerDescription, bridgeCount: bridgeCount})} AS datapoint
    """
  )

  Pairs(ownerDescription: String, bridgeCount: Int): [Pairs]

  BarChartPairs(year: Int, count: Int): [BarChartPairs]

  stackedBarChart_Rows_Per_State_Per_Year__1: [stackedBarChart_Rows_Per_State_Per_Year_Data_Point] @cypher(statement: """
      MATCH (ndf:NoDelimiterFile)
      WITH DISTINCT ndf.year AS year
      ORDER BY year DESC
      MATCH (ndf:NoDelimiterFile {year: year})-[:FILE_FOR]->(s:State)
      WITH year, ndf, s 
      ORDER BY year DESC, s.abbreviation ASC
      MATCH (ndf)-[r:CONTAINS]->()
      WITH year, s.abbreviation AS state, count(r) AS count
      RETURN {year: year, data: collect({state: state, count: count})}
    """
  )

  stackedBarChart_Rows_Per_Year_Per_State__1: [stackedBarChart_Rows_Per_Year_Per_State_Data_Point] @cypher(statement: """
      MATCH (s:State) 
      WITH s
      ORDER BY s.abbreviation ASC
      MATCH (s)<-[:FILE_FOR]-(ndf:NoDelimiterFile)
      WITH s, ndf, ndf.year AS year
      ORDER BY year DESC
      MATCH (ndf)-[r:CONTAINS]->()
      WITH s.abbreviation AS state, year, count(r) AS count
      RETURN {state: state, data: collect({year: year, count: count})}
    """
  )

  # stackedBarChart_Rows_Per_State_Per_Year__1: [stackedBarChart_Rows_Per_State_Per_Year_Data_Point] @cypher(statement: """
  #     MATCH (ndf:NoDelimiterFile)
  #     RETURN DISTINCT ndf.year AS year
  #     ORDER BY year DESC
  #   """
  # )

  # stackedBarChart_Rows_Per_State_Per_Year_Data_Point(year: String, data: [RowCountByState]): stackedBarChart_Rows_Per_State_Per_Year_Data_Point

  RowCountByState(state: String, count: Int): [RowCountByState]

  RowCountByYear(year: String, count: Int): [RowCountByYear]

  # chartHeatMapStateOwner2(state: [String], owner: [String]): Int @cypher(statement: """
  #   MATCH (state:State)
  #   WHERE state.name in $state
  #   WITH state
  #   MATCH (state)<-[*]-(bridge:Bridge)-[:OWNED_BY]->(owner:Owner)
  #   WHERE owner.description in $owner
  #   //RETURN state.name, owner.description, count(bridge)
  #   RETURN count(bridge)
  #   //RETURN state
  #   """
  # )

  # usersBySubstring(substring: String, first: Int = 10, offset: Int = 0): [User] @cypher(statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u")
 
}
